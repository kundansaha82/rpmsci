role docdev ( DSD:agent, R:agent,
		SIGNSC, TIDDSD, CN: symmetric_key,
		H, Mul, ZR:hash_func, G:text,
		SND1, RCV1: channel (dy))
played_by DSD def=
	local State : nat,
	A, D5, D6 :text,
	D8, D9, T3, T4, T5 :message,
	Inc: hash_func

	const
sec_1, sec_2, sec_3, sec_4, sec_5, auth_1, auth_2: protocol_id

	init State :=0
	transition
		1. State=0 	/\RCV1 (start) =|>
			State’ := 1
				/\ D8’ := H(SIGNSC.CN)
					/\secret(SIGNSC, sec_1,{DSD})

				/\ D9’ := H(D8’.T3)
				/\ SND1 (T3.D8’.D9’.CN.TIDDSD)
					/\witness(R, DSD, auth_1, D8)
					/\witness(R, DSD, auth_2, D9)
		2. State=1	/\RCV1 (T4.D5.D6) =|>
			State’ := 2	/\ A’ := ZR (D5.SIGNSC)
end role

role session 	( DSD:agent, R:agent,
		  SIGNSC, TIDDSD, CN: symmetric_key,
		  H, Mul, ZR:hash_func, G:text)

def=
	local
	SND2, RCV2, SND1, RCV1 : channel(dy)

	composition
	router(DSD, R, SIGNSC, TIDDSD, CN, H, Mul, ZR, G, RCV2, SND2)
/\	docdev(DSD, R, SIGNSC, TIDDSD, CN, H, Mul, ZR, G, SND1, RCV1)
end role

role environment()
def=
		const dsd, r : agent,
			signsc, tiddsd, cn : symmetric_key,

			h, mul, zr:hash_func,
			g:text,
			sec_A, sec_signsc : protocol_id
		intruder_knowledge = {dsd, r, h, mul, zr) %%63
		composition
	session(r, dsd, signsc, tiddsd, cn, h, mul, zr, g)
	/\ session(dsd, r, signsc, tiddsd, cn, h, mul, zr, g)
	/\ session(r, dsd, signsc, tiddsd, cn, h, mul, zr, g)
end role

goal
		secrecy_of sec_1
		secrecy_of sec_5
		authentication_on auth_1
		authentication_on auth_2
		secrecy_of signsc
end goal
environment()